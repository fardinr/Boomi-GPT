review a basic script that demonstrates how to parse a document containing xml data. integration uses the jdom xml library. for a full list of available objects, methods and properties, see http://www.jdom.org/docs/apidocs/. it may be helpful to do some additional research on working with xml in java. one good tutorial can be found here: https://www.tutorialspoint.com/java_xml/java_jdom_parse_document.htm. for more xml and xpath reference information, see http://www.w3schools.com. import org.jdom.input.saxbuilder; import org.jdom.document; import org.jdom.element; import org.jdom.xpath.xpath; import org.jdom.output.xmloutputter; // loop through the process documents for ( int i = 0; i < datacontext.getdatacount(); i++ ) { inputstream is = datacontext.getstream(i); properties props = datacontext.getproperties(i); // build xml document saxbuilder builder = new saxbuilder(); document doc = builder.build(is); // here's how to grab values from the current data // create an xpath statement to search for the element or elements you care about: xpath x; x = xpath.newinstance("//myelement"); // select a single node and grab the actual value elemyelement = x.selectsinglenode(doc); if (elemyelement != null) { myvalue = elemyelement.gettext(); } // or multiple nodes (if multiple nodes you will need to loop through them) myelements = x.selectnodes(doc); for (element myelement : myelements) { ... } // here's how to change the value of an existing element // first, find the element using xpath as illustrated above, then just the value: myelement.settext("new value"); // here's how to create a brand new element // first, create the new element object with the value... mynewelement = new element("myelement").addcontent("new value"); // ...then grab the appropriate parent element to attach your new element to: x = xpath.newinstance("//myparent"); eleparentelement = x.selectsinglenode(doc); if (eleparentelement != null) { eleparentelement.addcontent(mynewelement); } // when you're finished manipulating the xml data, you'll need to output the document's data to an inputstream to pass to the next step in your process work flow. xmloutputter outputter = new xmloutputter(); is = new bytearrayinputstream(outputter.outputstring(doc).getbytes("utf-8")); datacontext.storestream(is, props); }