you can use the embedded scripting dialog to configure a custom scripting function with an inline script. procedure create or open a map. click add a function to the map in the functions column. the add a function dialog opens. select the custom scripting category. select the scripting function, then click ok. the embedded scripting dialog opens with use inline script as the default script source. select a language from the language list â€” either groovy 1.5, groovy 2.4, or javascript. in the inputs list, do the following: click add input to add one or more input variables. for each input enter a name, select a data type, and click add. in the outputs list, do the following: click add output to add one or more output variables. for each output enter a name and click add. type the script in the script to execute box. optional: to open a larger window for editing and working with script variables, click edit. the edit window is similar to a full-function source code editor with features including line numbers, indentation, and syntax highlighting. for javascript scripts, the editor also supports syntax validation. you can customize the code editor by clicking actions.note: if you prefer to type your script in a plain text box, click to toggle between the code editor and the plain text editor. optional: to save the inline script as a scripting component for reuse in other maps, do the following: click create a component. the create a scripting component dialog opens. type a name for the scripting component and select a folder in which to store it. optional: if you want to use the new component as the source for this custom scripting function, select replace inline script. click create. the script source changes to use scripting component, and the name of the new component appears in the map script field. when you are finished, click ok. the configure defaults dialog opens. optional: enter default values for the input variables. select a caching method and click ok. map to the input(s) from the source profile or previous step and map the output(s) to the destination profile or next step.