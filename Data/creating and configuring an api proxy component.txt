create and configure an api proxy component in integration on the build page. procedure on the build page in the component explorer, navigate to the folder in which you want to create the component. click the blue arrow next to the folder. click the new component link. the create component dialog opens with the folder selected. in the type list, select api. in the component name field, type a name for the component. the maximum length is 255 characters. in the api type list, select api proxy. click create. the component configuration panel appears on a tab with the name you entered. the panel’s general tab is selected. optional: type a description. optional: import the openapi specification file, if available, for use in api management by the api gateway for routing requests and as api user documentation in the api developer portal: click import swagger file. the import a swagger file wizard opens. do one of the following and when done, click next: to import from a file, select choose a file. to import from a url, select import from a url. do one of the following and when done, click next: if importing from a file, click choose a file and in the system file selection dialog, select the file to upload. if importing from a url, type the external service url at which the file resides, and, if needed, type the user name and password. in the select fields to import screen, select all fields to import into your api proxy and click next. in the select api server url to import screen, select the url to import into your api proxy and click next. in the summary screen, verify that the fields are correct. click finish. the selected fields are imported and focus returns to the component configuration panel. type the published api title, published version number, and, optionally, published description for the api that you are deploying. note: if you imported an openapi specification file (step 9) and selected the fields api_title, api_version, and api_description for importing, these settings are automatically set to the values of those fields. in the api type section, select the type of routing on the api gateway — rest, soap, or odata. in the base api path field, type the base portion of the url for requests to the api defined by the api object. the full url is generated when the api proxy component is deployed. select the server tab. in the api server url field, type the url to which the api gateway sends api service requests. note: if you imported an openapi specification file (step 9) and selected the field api_url for importing, api server url is automatically set with the value of that field. optional: in the health check url field, type the url to which api service heath checks can be sent. in the authentication section, select either none or basic authentication as the authentication type used on the server on which the api service is hosted. if in the previous step you selected basic authentication, type the user name and password. optional: if you want to pass the original authorization header in the request, choose yes for the include original authorization header field. optional: in the custom headers section, specify custom headers that will be included by the api gateway in api service requests: click add header. in the key field, type the header name. header names can contain alphanumeric characters and special characters !#$%&'*+.^`~-_. set the header value by doing one of the following: to set an unencrypted value, type it in the value field. to set an encrypted value, click encrypt, click click to set, type the password, and click apply. for each additional header name you are specifying, repeat steps a–c. optional: specify api metadata: select the documentation tab. in the published contact information section: name description publisher select an organization component to reuse publisher information across multiple api service/proxy components or trading partner components. publisher name the name of the person or organization acting as the api publisher.note: if you imported an openapi specification file (step 9) and selected the field contact_name for importing, publisher name is automatically set with the value of that field. publisher email the email address of the publisher.note: if you imported an openapi specification file (step 9) and selected the field contact_email for importing, publisher email is automatically set with the value of that field. publisher url the url, including protocol, of the document containing contact information for the publisher. make sure you post this document to that url before you deploy the api proxy component.note: if you imported an openapi specification file (step 9) and selected the field contact_url for importing, publisher url is automatically set with the value of that field. in the license metadata section: name description license title the title of the license under which the api is provided.note: if you imported an openapi specification file (step 9) and selected the field license_name for importing, license title is automatically set with the value of that field. license information the url, including protocol, of the api license document. make sure you post this document to that url before you deploy the api proxy component.note: if you imported an openapi specification file (step 9) and selected the field license_url for importing, license information is automatically set with the value of that field. terms of service the url, including protocol, of the document containing the terms of service. make sure you post this document to that url before you deploy the api proxy component.note: if you imported an openapi specification file (step 9) and selected the field terms_of_service for importing, terms of service is automatically set with the value of that field. click save or save and close. next steps if you are ready to deploy the api proxy component, after clicking save, click create packaged components. the create packaged component wizard opens. complete the steps in the wizard and click the deploy button on the final confirmation message. your component now appears in the list of packaged components in the deploy > packaged components page, and in the list of deployed components on the deploy > deployments page.