forked execution is enabled in atom clouds by default, which means that each process executes in a separate jvm. you can optionally enable forked execution in a molecule. by default, a molecule's nodes execute integration processes within the same jvm as the node itself. however, you can enable an optional mode called forked execution that causes a node to execute each process in a separate jvm, forked each time that another process executes. note: forked execution cannot be enabled if multiple atoms are running on the same machine. java 8 jdk is required for molecules to use forked execution. the benefits of using forked execution are: currently-executing processes use more of the total memory of the machine. the node is more robust because catastrophic failures (such as a jvm crash or outofmemoryexception error) in a given process execution do not affect the main node process or any other currently-executing processes. the drawbacks to using forked execution are: a slight delay in process execution, due to operation system process startup time. more machine resources are used than a single node. you can enable forked execution in a molecule on the properties panel in atom management. you can set forked execution properties for a molecule or private atom cloud on the forked execution properties panel in atom management. note: connector browse operations run in forked executions in private atom clouds and therefore can use user-installed jar files, installed at the account-level, and execute browse operations in a separate jvm. additional resourcesjava virtual machine (jvm)