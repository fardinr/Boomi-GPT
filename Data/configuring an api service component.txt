after creating an api service component in integration on the build page, configure it by opening the api service component and adding endpoints. procedure select the general tab, and specify a title, version number, and description for the api that you are deploying. in the base api path field, type the base portion of the url for requests to the api defined by the component. the base portion is appended as you type the path to rest, path to soap, and path to odata on the other tabs.note: omit the leading slash, which is assumed and shown as the last character in path to rest, path to soap, and path to odata. optional: under advanced settings, specify the names of http headers whose values are potentially passed to the api’s linked listener process execution in the dynamic document property headers section. the values actually passed are those of headers not designated as protected in the shared web server settings. the values are passed as dynamic document properties with the prefix inheader_. for example, if you specify content-type, and content-type is not protected, its value would be passed as a dynamic document property named inheader_content-type. click add header. a field for specifying a header name appears in the list below. in the field, type the header name. header names can contain alphanumeric characters and special characters !#$%&'*+.^`~-_. standard http header names are case-sensitive. you can specify only the following standard http headers:search:columnrequest headersentity headers request headers entity headers accept content-encoding — the compression method applied to the data accept-charset content-language accept-encoding content-md5 accept-language content-type — the mime type of any input data, if given for each additional header name you are specifying, repeat steps a–b. if the component will include soap api endpoints, configure the general settings for wsdl generation. generate or create rest, soap, odata api endpoints, and configure the endpoints. if any endpoints reference json or xml profiles, select the profiles tab, and if there are profile type conflicts resolve them. see resolving profile type conflicts in an api service component. optional: boomi only supports xml for odata apis. if a json response is required, you must use the map shape to translate the response from an xml profile to json. optional: specify published information: select the documentation tab. in the published contact metadata section: name description publisher select an organization component to reuse publisher information across multiple api service/proxy components or trading partner components. publisher name the name of the person or organization acting as the api publisher. publisher email the email address of the publisher. publisher url the url, including protocol, of the document containing contact information for the publisher. make sure you post this document to that url before you deploy the api service component. in the license metadata section: name description license title the title of the license under which the api is provided. license url the url, including protocol, of the api license document. make sure you post this document to that url before you deploy the api service component. terms of service the url, including protocol, of the document containing the terms of service. make sure you post this document to that url before you deploy the api service component. click save or save and close. next steps if you are ready to deploy the api service component, after clicking save, click thecreate packaged component button. the create packaged component wizard opens. complete the steps in the wizard and click the deploy button on the final confirmation message. your component now appears in the list of packaged components in the deploy > packaged components page, and in the list of deployed components on the deploy > deployments page.