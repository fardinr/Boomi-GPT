use java visualvm, or a similar java monitoring tool, to invoke jmx operations remotely to ensure a clean shutdown. before you beginif you have not yet configured java visualvm, see the topic about configuring java visualvm for jmx management. about this taskto shut down an atom or molecule node completely to perform maintenance on the machine, use the decommissionshutdown operation, which pauses the node before stopping it. pausing the node allows time for listeners to stop, for atom workers to complete their tasks, and for processes to complete. you can shut down any node in a cluster, including the head node, without affecting the rest of the molecule. if you shut down a head node, the node relinquishes its headship to another node in the cluster.to shut down an atom cloud, repeat these steps for each molecule node. be sure the head node is the last node you shut down. procedure start java visual vm. in the application list, double-click the entry for the atom or molecule node that you want to shut down. a new tab named for the atom or molecule node opens in the right pane. on the new tab, click the mbeans tab. in the tree on the mbeans tab, expand com.boomi.container.services and click the containercontroller mbean. note: you can check the node’s current status by reviewing the status field on the attributes tab. during normal operation the node is typically in the running status. click the operations tab, and then click decommissionshutdown. the decommissioner moves through the following stages, writing log messages as it progresses. pausing_atom the decommissioner performs a pause for stop operation and disables the force restart after x minutes property (com.boomi.container.forcerestart). disabling the force restart property enables outstanding process executions to complete. depending on the expected run time of your processes, this stage could take a long time. see the next step in this task for an optional method of skipping to the next stage.the following occurs during this stage: the node’s status changes from running to pausing_for_stop. if you look at the atom or molecule’s status on the atom management page, you see next to its name. on the cluster status tab, you can see the status of the individual nodes. all listeners stop. the node notifies its local atom workers to stop. if the minimum atom workers property is set, the required number of atom workers starts on another node. the node continues to send outgoing messages. after all processes complete, the node’s status changes from pausing_for_stop to paused_for_stop. stopping_work_handlers the decommissioner pauses before stopping all work handlers (such as executionmanager). at this point, all processes should have completed and all atom workers should have stopped. flushing_reports the decommissioner flushes the reporting services. draining_queues the decommissioner waits for relevant message queues to drain. stopping_atom the decommissioner completes the normal shutdown process. optional: to move decommissioner to the next stage, even if the current stage is not complete, click skipcurrentdecommissionstage on the operations tab. as an example, you might use this operation if process executions are taking too long to complete during the pausing_atom stage. when you use the skipcurrentdecommissionstage operation, a warning message that describes the stage being skipped is written to the log. next stepsnote: to track the progress of the decommissioner, you can use java visualvm or another java monitoring tool to monitor the decommissionstage attribute.