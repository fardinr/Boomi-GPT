custom scripting allows you to perform custom manipulations and logic within a process to accomplish unique and advanced requirements that fall outside the native functionality of integration. custom scripting is available within a custom scripting step of a data process shape or a custom scripting map function. you can implement custom scripting in one of two ways: insert an inline script for one-time use. reference a scripting component that is available for reuse. scripting language supportintegration supports two common scripting languages: javascript and groovy. javascript and groovy share many similarities in syntax. both allow you to perform string manipulations and numeric calculations and to implement conditional logic. therefore, deciding which to use often comes down to personal preference.javascript is a common lightweight scripting language and is used for browser and non-browser development. in the context of integration, it can be used for sophisticated data value manipulation and conditional logic. the javascript version that you use is dependent upon the version of java on which your atom is running. the boomi atom clouds use a javascript engine that supports ecmascript version 5.1. for complete information about javascript, see the mozilla javascript reference. in addition, w3schools provides a popular javascript tutorial and reference guide.note: when using javascript, you do not have access to the platform scripting api or to any custom developed classes included in the atom.note: java version 1.8.0_241 upgrades now impose a limit of 32767 capture groups that can be defined in a javascript custom script.groovy is very similar to java, with looser variable typing and a few syntax differences regarding looping and method declaration. it is a more full-featured language than javascript and provides many more objects and methods for performing advanced manipulations. groovy scripts do not need to be compiled before executing.integration supports groovy language versions 2.4.13 and 1.5.8. when using groovy, you have access to all the classes in the java runtime jar. you can reference standard java classes to use in your script just like a java class by including import statements at the beginning of your script. this also includes the jdom classes for working with xml data. for complete information about groovy, see the groovy documentation. for information about the java api, see the java jse 7 javadoc or the java jse 8 javadoc or the amazon corretto 11 repository. custom script librariesto support custom scripting, you can reference custom java classes that were developed outside of integration by placing the packaged jar file(s) in the userlib/script directory. you can do that in one of two ways: upload jar files into your account library (settings > account information and setup > account libraries), add those files to a custom library component, and deploy the component to the appropriate atom, molecule, atom cloud (including the boomi atom clouds), or environment. note: uploaded or imported files pass through a virus scanner first. if the scan detects a virus, you receive an error message, and the scan rejects the file. if an error persists, contact boomi support. for jar files that support custom scripting, you create a custom library component with a type of scripting. when you deploy the component, the jar files that it references are deployed to the userlib/script directory. if the userlib/script directory does not exist, it is created. load jar files manually into the appropriate directory of a local atom, molecule, or private atom cloud. after you load the jar files, a restart is required. to avoid runtime conflicts with other connector classes, load your jar file(s) into the /<installation_directory>/userlib/script directory. account-specific jar file(s) must be loaded into the /<installation_directory>/accounts/<account_name>/userlib/script directory. if the userlib/script directory does not exist, you must create it. for additional information and examples, see topics: custom scripting function examplesand custom scripting step examples