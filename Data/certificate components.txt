certain connectors and document types might require the use of a certificate in order to ensure security when transmitting data across the communication protocol. connectors such as ftps, sftp, https, as2, and many others require the use of certificates in order to encrypt data and channels and to verify the digital signature of the person sending the data. certificates might use an existing key obtained from a certificate authority such as verisign or thawte, or they might use a key generated by boomi. keys generated by boomi are no less secure than purchased certificates. there are two types of certificates: certificate authority certificates, or ca certificates, are not integration components. you manually import them into the atom’s trust store by using the keytool utility. by default, the trust store is the cacerts file in the atom’s jre/lib/security/cacerts directory. the location of your atom’s trust store might be different. boomi certificates, or user certificates, on the other hand, are wrapped within components. you create these components on the build page. creating boomi certificates means that you self-sign the certificate. this is important to keep in mind when using a boomi certificate with a third-party service. you can create two types of boomi certificates: x.509 or pgp. a boomi certificate can be public or private. a public certificate contains only a public key. a private certificate contains both public and private keys. if you open a private certificate you can: import another private certificate into it export its private and public keys. if you open a public certificate you can: import another public certificate into it export its public key. private and public certificate file names have different file extensions. search:columncertificate typefile extension(s) certificate typefile extension(s) public x.509 .cer or .der private x.509 .pfx or .p12 public pgp _pub.asc private pgp _priv.asc note: check the documentation about the specific connector that you are using for more information about its specific certificate usage. creating and importing certificates you can create and import certificates in the following ways: you can create a certificate and generate a private key for it. when you create a certificate, you can import an existing private or public certificate into it. if you import a private certificate, your new certificate is private. if you import a public certificate, your new certificate is public. for a private x.509 certificate, you can import a chain of certificates. information about each certificate in the chain is displayed in the certificate tab. for a pgp certificate, you can define process extensions to enable different certificates to be substituted when a process is deployed. note: imported certificates are first passed through a virus scanner. the import results in an error if a virus is detected, and the certificate is rejected. if an error persists, contact boomi support. modifying and exporting certificates after creating a boomi certificate, you can modify or export certain aspects of the certificate depending on its type. you can change the name of a public or private certificate that you created. for private certificates, you can: re-import a private certificate or regenerate the private key. this action overwrites the current certificate, saving you from the trouble of creating a new certificate and changing any process components to reference the new certificate. this approach is very useful when you have to replace expired certificates. export the public and/or private keys for a private certificate. exported private keys are password protected with the password of your choice. change the password for a private x.509 certificate, provided that you have its current credentials. if the password is not encrypted and you attempt to close the x.509 certificate without saving it, you see a message that prompts you to re-save the certificate. for public certificates, you can: re-import a public certificate, which is similar to re-importing a private certificate. you cannot generate a new key for a public certificate. export only the public key for a public certificate. you might want to export a public key to give to your trading partner (or other client application) to encrypt the data that they send you. deploying certificate components independently note: public x.509, pgp, and public x.509 certificates are the only type of certificate components that you can deploy independently. when a process is deployed to an atom or environment, dependent certificate components referenced in connector shapes in the process are deployed, along with all other dependent components. if a certificate deployed in this manner expired and you secured a replacement, you would need to revise all of the processes for which the expired certificate is a dependent component to use the replacement certificate. then you would need to redeploy those processes. a better approach, which is valid only for public x.509 certificate components, is to deploy certificate components independently to atoms or environments. you can do this on the deployments page (or the deploy page for legacy deployment). when a certificate component is deployed independently, the certificate is loaded into the atom’s trust store and thus implicitly trusted by all connections that do not otherwise specify a custom ssl context. a connection’s use trusted ssl certificate option overrides deployed certificate components. for example, suppose your web server is running with certificate component a, and that component is deployed to your atom. if in a deployed process the connection is configured with the use trusted ssl certificate option to use certificate component b, when the process is executed certificate b will be used for the ssl connection and the connection will fail.