to control the java security compatibility of an atom or molecule, set the java security compatibility property on the properties panel. before you begin you must have the atom management privilege to perform this task. if you have the atom management read access privilege, you cannot perform the task. about this taskimportant: java no longer supports tls certificates issued after april 16, 2019 by symantec. if your connections failed suddenly due to invalid certificates after upgrading to java 11.0.12.7.1, you must replace the certificate in order to fix the issue. for more information, see the article jdk-8215012 : release note: distrust tls server certificates anchored by symantec root cas."the security algorithms that java supports change over time. for example, md5 is no longer considered a secure algorithm for validating x.509 certificates and java has deprecated support for it. boomi recommends running with the most secure algorithms available, which typically means the latest. by default, atoms and molecules use the most secure compatibility setting available at the time they are installed. but you can modify the security compatibility of an atom or molecule by setting the java security compatibility property (-dcom.boomi.container.securitycompatibility). controlling security compatibility enables you to upgrade your jvm without the risk of breaking existing processes due to incompatible security algorithms.important: to remain compatible with all java versions after 1.8.0_221, "symantec_tls" has been removed from the jdk.security.cadistrustpolicies security property in the java.security configuration file. procedure go to manage > atom management. select the atom or molecule from the list. in settings & configuration, click properties. the atom properties or molecule properties panel opens. click the advanced tab. to specify the level of java security algorithms that you want the atom or molecule to support, do the following: select the java security compatibility property (-dcom.boomi.container.securitycompatibility) and click add a property. in the property value field, specify one of the following: 2016.01 compatible with java 1.8u66.important: to remain compatible with all java versions after 1.8.0_221, "symantec_tls" has been removed from the jdk.security.cadistrustpolicies security property in the java.security configuration file.setting the 2016.01 property value on java 8 sets the following security and system properties: jdk.certpath.disabledalgorithms = md2, rsa keysize < 1024 jdk.tls.disabledalgorithms = sslv3, rc4, dh keysize < 768 jdk.jar.disabledalgorithms = <blank> jdk.http.auth.tunneling.disabledschemes = <blank> jdk.rmi.corba.allowcustomvaluehandler = true com.sun.jndi.rmi.object.trusturlcodebase = true com.sun.jndi.cosnaming.object.trusturlcodebase = true jdk.net.urlclasspath.disablerestrictedpermissions = true jdk.util.zip.ensuretrailingslash = false sun.rmi.server.disableincominghttp = false com.sun.jndi.ldap.object.disableendpointidentification = true for example, you can continue to use deprecated algorithms for certificate signature validation, such as md5, by setting the 2016.01 property value. 2017.06 compatible with java 1.8u71.for atoms that were installed after the june 2017 release but prior to the january 2019 release, the com.boomi.container.securitycompatibility property is set to 2017.06 by default.important: to remain compatible with all java versions after 1.8.0_221, "symantec_tls" has been removed from the jdk.security.cadistrustpolicies security property in the java.security configuration file.setting the 2017.06 property value on java 8 sets the following security and system properties: jdk.certpath.disabledalgorithms = md2, md5, rsa keysize < 1024 jdk.tls.disabledalgorithms = sslv3, rc4, md5withrsa, dh keysize < 768 jdk.jar.disabledalgorithms = <blank> jdk.http.auth.tunneling.disabledschemes = <blank> jdk.rmi.corba.allowcustomvaluehandler = true com.sun.jndi.rmi.object.trusturlcodebase = true com.sun.jndi.cosnaming.object.trusturlcodebase = true jdk.net.urlclasspath.disablerestrictedpermissions = true jdk.util.zip.ensuretrailingslash = false sun.rmi.server.disableincominghttp = false com.sun.jndi.ldap.object.disableendpointidentification = true 2019.01 compatible with java 1.8.0_372. for atoms that are installed after the january 2019 release, the com.boomi.container.securitycompatibility property is set to 2019.01 by default.important: to remain compatible with all java versions after 1.8.0_221, "symantec_tls" has been removed from the jdk.security.cadistrustpolicies security property in the java.security configuration file.important: for version 2019.01 to remain compatible with java 1.8.0_372 version upgrades, the following nist ec curves were reintroduced to the default tls algorithms in the java.security configuration file: sect283k1, sect283r1, sect409k1, sect409r1, sect571k1, sect571r1, and secp256k1.important: for version 2019.01 to remain compatible with java 1.8.0_372 version upgrades, the system property named jdk.security.allownoncaanchor is introduced to maintain certificate functionality. to allow customers to maintain current certificate functionality, the property must be set to "true". important: to maintain compatibility with java 1.8.0_271 version upgrades, the security property, jdk.disabled.namedcurves, is set to blank for 2019.01 security compatibility and earlier. this setting re-enables weak named curves that java disabled in version 1.8.0_271.important: java no longer supports tls certificates issued after april 16, 2019 by symantec. if your connections failed suddenly due to invalid certificates after upgrading to java 11.0.12.7.1, you must replace the certificate in order to fix the issue. for more information, see the article jdk-8215012 : release note: distrust tls server certificates anchored by symantec root cas."setting the 2019.01 property value sets the security and system properties that are delivered with java 1.8u181. 2021.01 currently, version 2021.01 is the same as jvm_defined (described below). however, boomi reserves the right to add new custom properties in the future. all changes will be documented here and within the release notes accompanying that specific release. removes sha1 usage signedjar & denyafter 2019-01-01 from the jdk.certpath.disabledalgorithms security policy removes sha1 denyafter 2019-01-01 from the jdk.jar.disabledalgoritms security property note: any jar signed with sha-1 algorithms and timestamped prior to january 01, 2019 will not be restricted.important: java no longer supports tls certificates issued after april 16, 2019 by symantec. if your connections failed suddenly due to invalid certificates after upgrading to java 11.0.12.7.1, you must replace the certificate in order to fix the issue. for more information, see the article jdk-8215012 : release note: distrust tls server certificates anchored by symantec root cas." jvm_defined the atom uses the compatibility settings defined by the currently installed jvm. as you install new versions of the jvm to run your atom or molecule, this value ensures that the latest and most secure settings are used. descriptions of the security and system properties are defined individually in the java 8 release notes and the java 11 release notes of the release where the properties were changed.note: if you do not explicitly set the java security compatibility property, the atom or molecule uses the security compatibility settings associated with the atom or molecule installer that was used to install it. click save. because changes to this property do not take effect until the molecule or atom cloud is restarted, you are prompted to restart. you have the option to restart now or restart later.